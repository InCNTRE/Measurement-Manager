#!/usr/bin/perl
#--------------------------------------------------------------------
# Nagios.pm
#--------------------------------------------------------------------
package Nagios;
use strict;
use warnings;
use vars '$AUTOLOAD';
use Data::Dumper;
use Carp;

#
# Writes the Nagios .cfg file 
#

sub new {
    my $class = shift;
    my $self  = {};
    bless $self, $class;

    # Configuration string to be written to a .cfg file
    my $config = "\n"
      . "######################\n"
      . "# DEFINE SERVICES\n"
      . "######################\n";

    my $hosts = "\n"
      . "######################\n"
      . "# DEFINE HOSTS\n"
      . "######################\n";

    my $host_groups = "\n"
      . "######################\n"
      . "# DEFINE HOST GROUP\n"
      . "######################\n"
      . "define hostgroup {\n"
      . "\t\thostgroup_name\tOpenFlow\n"
      . "\t\talias\t\tOpenFlow\n"
      . "\t\tmembers\t\t";

	my $commands = "\n\n\n"
      . "######################\n"
      . "# DEFINE COMMANDS\n"
      . "######################\n"
	  . "define command {\n"
      . "\t\tcommand_name\t\tcheck_cpu\n"
      . "\t\tcommand_line\t\t\$USER1\$/check_cpu -r \$HOSTADDRESS\$ -c \$ARG1\$ -v \$ARG2\$\n"
      . "}\n\n"
      . "define command {\n"
      . "\t\tcommand_name\t\tcheck_of_flows\n"
      . "\t\tcommand_line\t\t\$USER1\$/check_openflow -H \$HOSTADDRESS\$ -c dump-flows\n"
      . "}\n\n"
      . "define command {\n"
      . "\t\tcommand_name\t\tcheck_of_hitrate\n"
      . "\t\tcommand_line\t\t/usr/local/nagios/libexec/check_of_hitrate -H \$HOSTADDRESS\$ -c dump-tables\n"
      . "}\n";

    $self->{_host_groups} = $host_groups;
    $self->{_config}      = $config;
    $self->{_hosts}       = $hosts;
    $self->{_commands}	  = $commands;

    # Name of output.cfg file
    my $config_file = "auto-openflow.cfg";
    $self->{_config_file} = $config_file;

    # Set the contact_group that will be notified in the event of
    # a Nagios alarm
    my $contact_groups = "openflow";
    $self->{_contact_groups} = $contact_groups;

    # Set the Nagios checks that will run for each slice
    my $slice_commands = {
        'OF_SERVICE' => 'check_tcp!' . '6644' . '!',

        #'CPU_LOAD' => 'check_nrpe!check_load!-w 75% ! -c 90%!',
        #'DISK_SPACE' => 'check_nrpe!check_disk!-w 30%!',
    };
    $self->{_slice_commands} = $slice_commands;

    # Set the Nagios checks that will run for each device(switch)
    # For NLR switches
    # check_cpu!nLr-mon!hp!" 75"! 80
    my $device_commands = {
        'OF_FLOWS' => 'check_of_flows',
        'CPU' => 'check_cpu!of-snoop!hp!" 75"! 80',  # HP Procurve & NLR Swithes
	#'OF_HITRATE' => 'check_of_hitrate',
    };
    $self->{_device_commands} = $device_commands;
    $self->_init(@_);
    return $self;
}

#		Nagios::write_config({
#			type=>'slice',
#			hostname=>$slice->hostname,
#			ip=>$slice->ip,
#			port=>$slice->port
#			});

sub config { shift->{config} }

sub _init {
    my $self  = shift;
    my %pairs = @_;
    foreach my $key ( keys %pairs ) {
        $self->{ "\_" . $key } = $pairs{$key};
    }
}

sub AUTOLOAD {
    my ( $self ) = @_;

    $AUTOLOAD =~ /.*::get(_\w+)/
      && return $self->{$1};
    
    $AUTOLOAD =~ /.*::set(_\w+)/
      && do {
        my $self = shift;
        $self->{$1} = "@_";
      };

    $AUTOLOAD =~ /.*::add(_\w+)/
      and do {
        my $self = shift;
        $self->{$1} .= "@_";
      };
}

sub write_config {
    my $self = shift;
    my $fh;
    open $fh, ">" . $self->get_config_file() or die $!;
    print $fh "########################################\n"
      . "# Config auto-generated by GENI::Nagios\n"
      . "########################################\n";
    print $fh $self->get_hosts();
    print $fh $self->get_config();
    print $fh $self->get_host_groups();
    print $fh "\n}";
    print $fh $self->get_commands();
    close $fh;
}

sub define_host {
    my $self = shift;
    my $obj  = shift;

    #warn Dumper $obj;
    my $hostname = $obj->get_hostname();

    #my $hostname;
    #if ( ref($obj) eq 'Slice' ){
    #    $hostname = $obj->get_hostname();
    #}
    #else {
    #	$hostname = $obj->get_controller_hostname();
    #}

    my $ip             = $obj->get_ip();
    my $contact_groups = $self->get_contact_groups();

    if ( $hostname ne 'localhost' ) {
        my $host =
            "define host{\n"
          . "\tuse\t\t\tgeneric-host\n"
          . "\thost_name\t\t"
          . $hostname . "\n"
          . "\talias\t\t\t"
          . $hostname . "\n"
          . "\taddress\t\t\t"
          . $ip . "\n"
          . "\tcontact_groups\t\t"
          . $contact_groups . "\n" . "}\n\n";
        $self->add_hosts($host);
        $self->add_host_groups( $hostname . "," );
    }
}

sub define_services {
    my $self       = shift;
    my $obj        = shift;
    my $hostname   = $obj->get_hostname();
    my $port       = $obj->get_controller_port();
    my $slice_name = $obj->get_slice_name();

    my $device_commands = {
        'OF_FLOWS' => 'check_of_flows',
        'CPU' => 'check_cpu!of-snoop!hp!" 75"! 80', # HP Procurve & NLR Swithes,
    };

    if (   ( ref($obj) eq 'Device' )
        && ( $obj->get_hostname() =~ /([a-zA-Z\.]*nlr\.net)/ ) )
    {
        delete $device_commands->{CPU};
        $device_commands->{CPU_NLR} =
          'check_cpu!nLr-mon!hp!" 75"! 80';         # NLR switches
    }
    if ( ( ref($obj) eq 'Device' ) && ( $obj->get_hostname() =~ /^(156*)$/ ) ) {
        delete $device_commands->{CPU};
        $device_commands->{OF_HITRATE} = 'check_of_hitrate';
    }

    #my $hostname;
    #if ( ref($obj) eq 'Slice' ){
    #    $hostname = $obj->get_hostname();
    #}
    #else {
    #$hostname = $obj->get_controller_hostname();
    #}

    my $type           = ref($obj);
    my $comm           = "get_" . lc($type) . "_commands()";
    my $commands       = $self->$comm;
    my $contact_groups = $self->get_contact_groups();
    my $service;
    #print "Hostname: "
    #  . $obj->get_hostname() . " "
    #  . $obj->get_ip . " "
    #  . $obj->get_controller_port() . "\n";
    my $slice_commands = {
        'OF_SERVICE' => 'check_tcp!' . $obj->get_controller_port() . '!',

        #'CPU_LOAD' => 'check_nrpe!check_load!-w 75% ! -c 90%!',
        #'DISK_SPACE' => 'check_nrpe!check_disk!-w 30%!',
    };

    #warn Dumper $obj;
    if ( $hostname ne 'localhost' ) {
        if ( ref($obj) eq 'Slice' ) {
            $slice_commands = $slice_commands;
        }
        else {
            $slice_commands = $device_commands;
        }
        foreach my $command ( keys %$slice_commands ) {
            $service =
                "define service{\n"
              . "\tuse\t\t\tgeneric-service\n"
              . "\thost_name\t\t"
              . $hostname . "\n"
              . "\tservice_description\t"
              . $command . "\n"
              . "\tcheck_command\t\t"
              . $slice_commands->{$command} . "\n"
              . "\tcontact_groups\t\t"
              . $contact_groups . "\n"
              .

              #"\tnotification_options\tw,u,c,r\n".
              #"\tcheck_period\t\t24x7\n".
              #"\tnotification_period\t24x7\n".
              #"\tnormal_check_interval\t1\n".
              #"\tretry_check_interval\t1\n".
              "}\n\n";
            $self->add_config($service);
        }
    }

}

1;

